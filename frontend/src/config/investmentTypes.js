const currentDate = new Date();
const currentYear = currentDate.getFullYear();

export const investmentTypes = {
  saving_account: {
    label: "Saving Account",
    parameters: [
      {
        id: "yearly_interest_rate",
        label: "Yearly Interest Rate (%)",
        type: "number",
        required: true,
        min: 0,
        max: 100,
        step: 0.1,
      },
      {
        id: "start_year",
        label: "Start Year",
        type: "number",
        required: true,
        min: currentYear,
        step: 1,
      },

      {
        id: "start_month",
        label: "Start Month",
        type: "number",
        required: true,
        min: 1,
        max: 12,
        step: 1,
      },
      {
        id: "end_year",
        label: "End Year",
        type: "number",
        required: true,
        min: currentYear + 1,
        step: 1,
        validate: (formData) => {
          if (formData.start_year >= formData.end_year) {
            return `End year must be greater than start year`;
          }
          return true;
        },
      },
      {
        id: "end_month",
        label: "End Month",
        type: "number",
        required: true,
        min: 1,
        max: 12,
        step: 1,
      },
      {
        id: "initial_investment",
        label: "Initial Investment (€)",
        type: "number",
        required: false,
        min: 0,
        step: 100,
        max: 22950,
      },
      {
        id: "monthly_investment",
        label: "Monthly Investment (€)",
        type: "number",
        required: false,
        min: 0,
        step: 100,
      },
    ],
  },
  stock_exchange: {
    label: "Stock Exchange",
    parameters: [
      {
        id: "yearly_interest_rate",
        label: "Yearly Interest Rate (%)",
        type: "number",
        default: 8,
        required: true,
        min: 0,
        max: 100,
        step: 0.1,
      },
      {
        id: "start_year",
        label: "Start Year",
        type: "number",
        required: true,
        min: currentYear,
        step: 1,
      },

      {
        id: "start_month",
        label: "Start Month",
        type: "number",
        required: true,
        min: 1,
        max: 12,
        step: 1,
      },
      {
        id: "end_year",
        label: "End Year",
        type: "number",
        required: true,
        min: currentYear + 1,
        step: 1,
        validate: (formData) => {
          if (formData.start_year >= formData.end_year) {
            return `End year must be greater than start year`;
          }
          return true;
        },
      },
      {
        id: "end_month",
        label: "End Month",
        type: "number",
        required: true,
        min: 1,
        max: 12,
        step: 1,
      },
      {
        id: "initial_investment",
        label: "Initial Investment (€)",
        type: "number",
        required: false,
        min: 0,
        step: 100,
        default: 0,
      },
      {
        id: "monthly_investment",
        label: "Monthly Investment (€)",
        type: "number",
        required: false,
        min: 0,
        step: 100,
        default: 0,
      },
    ],
  },
  real_estate: {
    label: "Real Estate",
    parameters: [
      {
        id: "property_value",
        label: "Property Value (€)",
        type: "number",
        required: true,
        min: 0,
        step: 1000,
      },
      {
        id: "start_year",
        label: "Purchase Year",
        type: "number",
        required: true,
        min: 1900,
        step: 1,
      },
      {
        id: "start_month",
        label: "Purchase Month",
        type: "number",
        required: true,
        min: 1,
        max: 12,
        step: 1,
      },
      {
        id: "end_year",
        label: "Year of sale",
        type: "number",
        required: true,
        min: 1900,
        step: 1,
      },
      {
        id: "end_month",
        label: "Month of sale",
        type: "number",
        required: true,
        min: 1,
        max: 12,
        step: 1,
      },
      {
        id: "loan_rate",
        label: "Loan Rate (%)",
        type: "number",
        required: true,
        min: 0,
        max: 100,
        step: 0.1,
      },
      {
        id: "insurance_rate",
        label: "Insurance Rate (%)",
        type: "number",
        required: true,
        min: 0,
        max: 100,
        step: 0.1,
      },
      {
        id: "loan_amount",
        label: "Loan Amount (€)",
        type: "number",
        required: true,
        min: 0,
        step: 1000,
      },
      {
        id: "loan_duration",
        label: "Loan Duration (years)",
        type: "number",
        required: true,
        min: 1,
        step: 1,
      },
      {
        id: "yearly_index",
        label: "Property annual increase (%)",
        type: "number",
        required: true,
        min: 0,
        max: 100,
        step: 0.1,
      },
      {
        id: "personal_contribution",
        label: "Personal Contribution (€)",
        type: "number",
        required: true,
        min: 0,
        step: 100,
      },
      {
        id: "monthly_charges",
        label: "Monthly Charges (€)",
        type: "number",
        required: true,
        min: 0,
        step: 100,
      },
      {
        id: "property_tax",
        label: "Property Tax (€)",
        type: "number",
        required: true,
        min: 0,
        step: 100,
      },
      {
        id: "early_repayment_fees",
        label: "Early Repayment Fees (%)",
        type: "number",
        required: true,
        min: 0,
        max: 100,
        step: 0.1,
      },
      {
        id: "notary_fees",
        label: "Notary Fees (€)",
        type: "number",
        min: 0,
        step: 100,
      },
      {
        id: "agency_fees",
        label: "Agency Fees (€)",
        type: "number",
        min: 0,
        step: 100,
      },
      {
        id: "other_fees",
        label: "Other Fees (€)",
        type: "number",
        min: 0,
        step: 100,
      },
      {
        id: "work_renovation",
        label: "Work / Renovation (€)",
        type: "number",
        min: 0,
        step: 100,
      },
    ],
  },
  rental_for_personal_use: {
    label: "Rental for Personal Use",
    parameters: [
      {
        id: "start_year",
        label: "Start Year",
        type: "number",
        required: true,
        min: currentYear,
        step: 1,
      },

      {
        id: "start_month",
        label: "Start Month",
        type: "number",
        required: true,
        min: 1,
        max: 12,
        step: 1,
      },
      {
        id: "end_year",
        label: "End Year",
        type: "number",
        required: true,
        min: currentYear + 1,
        step: 1,
        validate: (formData) => {
          if (formData.start_year >= formData.end_year) {
            return `End year must be greater than start year`;
          }
          return true;
        },
      },
      {
        id: "end_month",
        label: "End Month",
        type: "number",
        required: true,
        min: 1,
        max: 12,
        step: 1,
      },
      {
        id: "rent_including_charges",
        label: "Rent (including charges) (€)",
        type: "number",
        required: true,
        min: 0,
        step: 100,
      },
    ],
  },
  // Add more investment types here as needed
};
